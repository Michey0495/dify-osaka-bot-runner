# .github/workflows/main.yml (または call-dify-bot.yml)

name: 大阪弁Difyボット呼び出しテスト

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # 日本時間の午前9時 (UTC 0時)

jobs:
  call_dify_api_job:
    runs-on: ubuntu-latest
    steps:
      - name: Difyの大阪弁ボットにメッセージを送信
        run: |
          echo "Dify APIエンドポイントURL: ${{ secrets.DIFY_API_URL }}"
          echo "送信するメッセージ: 今日の調子どない？"

          # Dify APIに送信するリクエストボディを定義
          # 提供されたサンプルに基づき、`query`をトップレベルに配置し、
          # 不要な `inputs: {}` と `files` 配列を削除。
          # `response_mode` は 'blocking' を使用します。
          REQUEST_BODY=$(cat <<EOF
          {
            "query": "今日の調子どない？",
            "response_mode": "blocking",
            "conversation_id": "",
            "user": "github-actions-hanzon-{{ github.run_id }}"
          }
          EOF
          )

          echo "送信するリクエストボディ:"
          echo "$REQUEST_BODY"

          response=$(curl -sS -X POST \
            -H "Authorization: Bearer ${{ secrets.DIFY_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$REQUEST_BODY" \
            "${{ secrets.DIFY_API_URL }}")

          echo "Difyからの応答:"
          echo "$response"

          # 応答JSONから "answer" キーの値（大阪弁の返事）を抽出して表示 (jqコマンドが必要)
          # jqがインストールされていない環境を考慮し、より堅牢な方法としてgrepで確認
          if echo "$response" | grep -q '"answer"'; then
            echo "応答に 'answer' が含まれています。成功とみなします。"
            # 必要であれば、jqを使ってanswerの値を具体的に抽出表示できます
            # 例 (ubuntu-latestにはjqがプリインストールされています):
            # osaka_answer=$(echo "$response" | jq -r '.answer')
            # echo "大阪弁の返事: $osaka_answer"
          else
            echo "応答に 'answer' が見つかりませんでした。エラーの可能性があります。応答全体を確認してください。"
            # exit 1 # 必要であればエラーとしてマーク
          fi
